@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Used by growing and shrinking material
@mixin m-ease-in-out($element: "all", $length: 200ms) {
  transition: unquote($element) $length cubic-bezier(0.4, 0, 0.2, 1);
}

// Used by elements who enter the screen at full velocity and slowly decelerate to a resting point.
@mixin m-ease-out($element: "all", $length: 200ms) {
  transition: unquote($element) $length cubic-bezier(0, 0, 0.2, 1);
}

// Used by elements who leave the screen at full velocity
@mixin m-ease-in($element: "all", $length: 200ms) {
  transition: unquote($element) $length cubic-bezier(0.4, 0, 1, 1);
}

// It is used by exiting elements that may return to the screen at any time.
@mixin m-ease-in-out-s($element: "all", $length: 200ms) {
  transition: unquote($element) $length cubic-bezier(0.4, 0, 0.6, 1);
}

@mixin up($size) {
  $size: strip-unit($size);
  @media (min-width: $size * 1px) {
    @content;
  }
}
@mixin down($size) {
  $size: strip-unit($size);
  @media (max-width: $size * 1px) {
    @content;
  }
}

%box-shadow {
  box-shadow: 0 0 1px 0 rgba(0, 0, 0, 0.08), 0 6px 12px 0 rgba(0, 0, 0, 0.07),
    0 1px 1px 0 rgba(0, 0, 0, 0.07);
}

@function convert-to-rem($value, $base-value: $rem-base) {
  @return strip-unit($value) / strip-unit($base-value) * 1rem;
}

@function rem($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append(
      $remValues,
      convert-to-rem(nth($values, $i), $base-value)
    );
  }
  @return $remValues;
}

@function em($values) {
  $remValues: rem($values);

  $max: length($remValues);

  @if $max == 1 {
    @return strip-unit(nth($remValues, 1)) * 1em;
  }

  $emValues: ();
  @for $i from 1 through $max {
    $emValues: append($emValues, strip-unit(nth($remValues, $i)) * 1em);
  }
  @return $emValues;
}
